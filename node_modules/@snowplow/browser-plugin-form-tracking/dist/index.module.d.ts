import { BrowserPlugin, FilterCriterion } from '@snowplow/browser-tracker-core';
import { DynamicContext } from "@snowplow/tracker-core";
/** The form tracking configuration */
interface FormTrackingConfiguration {
    /** The options which can be configured for the form tracking events */
    options?: FormTrackingOptions;
    /** The dyanmic context which will be evaluated for each form event */
    context?: DynamicContext | null;
}
interface FormTrackingOptions {
    forms?: FilterCriterion<HTMLElement>;
    fields?: FilterCriterion<TrackedHTMLElement> & {
        transform: transformFn;
    };
}
interface TrackedHTMLElementTagNameMap {
    textarea: HTMLTextAreaElement;
    input: HTMLInputElement;
    select: HTMLSelectElement;
}
type TrackedHTMLElement = TrackedHTMLElementTagNameMap[keyof TrackedHTMLElementTagNameMap];
interface ElementData extends Record<string, string | null | undefined> {
    name: string;
    value: string | null;
    nodeName: string;
    type?: string;
}
type transformFn = (x: string | null, elt: ElementData | TrackedHTMLElement) => string | null;
/**
 * A plugin which enabled automatic form tracking
 */
declare function FormTrackingPlugin(): BrowserPlugin;
/**
 * Enables automatic form tracking
 * An event will be fired when a form field is changed or a form submitted.
 * This can be called multiple times: only forms not already tracked will be tracked.
 *
 * @param configuration - The form tracking configuration
 * @param trackers - The tracker identifiers which the events will be sent to
 */
declare function enableFormTracking(configuration?: FormTrackingConfiguration, trackers?: Array<string>): void;
export { FormTrackingConfiguration, FormTrackingPlugin, enableFormTracking };
